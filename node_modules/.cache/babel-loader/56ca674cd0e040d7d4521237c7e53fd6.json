{"ast":null,"code":"import axios from 'axios';\nimport qs from 'qs';\nimport _ from 'lodash';\nimport { toast } from 'react-toastify';\naxios.defaults.baseURL = \"http://127.0.0.1:8080\";\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.delete['Content-Type'] = 'application/json'; // temporarily cancel all requests until backend is ready\n\nconst CancelToken = axios.CancelToken;\naxios.interceptors.request.use(request => {\n  // if (request.method === 'put' || request.method === 'post' || request.method === 'delete') {\n  //     request.data = qs.stringify(request.data);\n  // }\n  return request;\n});\n\nconst errorHandler = error => {\n  // great gist https://gist.github.com/saqueib/a495af17d7c0e2fd5c2316b0822ebac3\n  // if has response show the error\n  console.error(error);\n  let message = 'An error occurred.';\n\n  if (error.response) {\n    console.log(error.response.data);\n    message = _.get(error, 'response.data.message') || message;\n  }\n\n  toast.error(message);\n  return Promise.reject({ ...error\n  });\n};\n\nconst responseHandler = response => {\n  return response;\n};\n\naxios.interceptors.response.use(responseHandler, errorHandler);\nvar whitelist = ['http://example1.com', 'http://example2.com'];\nvar corsOptions = {\n  origin: function (origin, callback) {\n    if (whitelist.indexOf(origin) !== -1) {\n      callback(null, true);\n    } else {\n      callback(new Error('Not allowed by CORS'));\n    }\n  }\n};\n\nvar express = require('express'); // Import the library:\n\n\nvar cors = require('cors');\n\nvar app = express(); // Then pass them to cors:\n\napp.use(cors(corsOptions));","map":{"version":3,"sources":["/Users/nicholaspatrikeos/Sites/Gallifrey4.0/gallifrey-frontend/src/axios.js"],"names":["axios","qs","_","toast","defaults","baseURL","headers","put","post","delete","CancelToken","interceptors","request","use","errorHandler","error","console","message","response","log","data","get","Promise","reject","responseHandler","whitelist","corsOptions","origin","callback","indexOf","Error","express","require","cors","app"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,EAAP,MAAe,IAAf;AACA,OAAOC,CAAP,MAAc,QAAd;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AAEAH,KAAK,CAACI,QAAN,CAAeC,OAAf,GAAyB,uBAAzB;AACAL,KAAK,CAACI,QAAN,CAAeE,OAAf,CAAuBC,GAAvB,CAA2B,cAA3B,IAA6C,kBAA7C;AACAP,KAAK,CAACI,QAAN,CAAeE,OAAf,CAAuBE,IAAvB,CAA4B,cAA5B,IAA8C,kBAA9C;AACAR,KAAK,CAACI,QAAN,CAAeE,OAAf,CAAuBG,MAAvB,CAA8B,cAA9B,IAAgD,kBAAhD,C,CAEA;;AACA,MAAMC,WAAW,GAAGV,KAAK,CAACU,WAA1B;AAEAV,KAAK,CAACW,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCD,OAAD,IAAa;AACxC;AACA;AACA;AACA,SAAOA,OAAP;AACH,CALD;;AAOA,MAAME,YAAY,GAAIC,KAAD,IAAW;AAC5B;AAEA;AACAC,EAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AAEA,MAAIE,OAAO,GAAG,oBAAd;;AAEA,MAAIF,KAAK,CAACG,QAAV,EAAoB;AAChBF,IAAAA,OAAO,CAACG,GAAR,CAAYJ,KAAK,CAACG,QAAN,CAAeE,IAA3B;AACAH,IAAAA,OAAO,GAAGf,CAAC,CAACmB,GAAF,CAAMN,KAAN,EAAa,uBAAb,KAAyCE,OAAnD;AACH;;AAEDd,EAAAA,KAAK,CAACY,KAAN,CAAYE,OAAZ;AAEA,SAAOK,OAAO,CAACC,MAAR,CAAe,EAAE,GAAGR;AAAL,GAAf,CAAP;AACH,CAhBD;;AAkBA,MAAMS,eAAe,GAAIN,QAAD,IAAc;AAClC,SAAOA,QAAP;AACH,CAFD;;AAIAlB,KAAK,CAACW,YAAN,CAAmBO,QAAnB,CAA4BL,GAA5B,CAAgCW,eAAhC,EAAiDV,YAAjD;AAEA,IAAIW,SAAS,GAAG,CAAC,qBAAD,EAAwB,qBAAxB,CAAhB;AACA,IAAIC,WAAW,GAAG;AAChBC,EAAAA,MAAM,EAAE,UAAUA,MAAV,EAAkBC,QAAlB,EAA4B;AAClC,QAAIH,SAAS,CAACI,OAAV,CAAkBF,MAAlB,MAA8B,CAAC,CAAnC,EAAsC;AACpCC,MAAAA,QAAQ,CAAC,IAAD,EAAO,IAAP,CAAR;AACD,KAFD,MAEO;AACLA,MAAAA,QAAQ,CAAC,IAAIE,KAAJ,CAAU,qBAAV,CAAD,CAAR;AACD;AACF;AAPe,CAAlB;;AAUA,IAAIC,OAAO,GAAGC,OAAO,CAAC,SAAD,CAArB,C,CACA;;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,GAAG,GAAGH,OAAO,EAAjB,C,CAEA;;AACAG,GAAG,CAACrB,GAAJ,CAAQoB,IAAI,CAACP,WAAD,CAAZ","sourcesContent":["import axios from 'axios'\nimport qs from 'qs';\nimport _ from 'lodash';\n\nimport { toast } from 'react-toastify';\n\naxios.defaults.baseURL = \"http://127.0.0.1:8080\"\naxios.defaults.headers.put['Content-Type'] = 'application/json';\naxios.defaults.headers.post['Content-Type'] = 'application/json';\naxios.defaults.headers.delete['Content-Type'] = 'application/json';\n\n// temporarily cancel all requests until backend is ready\nconst CancelToken = axios.CancelToken;\n\naxios.interceptors.request.use((request) => {\n    // if (request.method === 'put' || request.method === 'post' || request.method === 'delete') {\n    //     request.data = qs.stringify(request.data);\n    // }\n    return request;\n});\n\nconst errorHandler = (error) => {\n    // great gist https://gist.github.com/saqueib/a495af17d7c0e2fd5c2316b0822ebac3\n\n    // if has response show the error\n    console.error(error);\n\n    let message = 'An error occurred.';\n\n    if (error.response) {\n        console.log(error.response.data)\n        message = _.get(error, 'response.data.message') || message;\n    }\n\n    toast.error(message);\n\n    return Promise.reject({ ...error })\n}\n\nconst responseHandler = (response) => {\n    return response;\n}\n\naxios.interceptors.response.use(responseHandler, errorHandler);\n\nvar whitelist = ['http://example1.com', 'http://example2.com']\nvar corsOptions = {\n  origin: function (origin, callback) {\n    if (whitelist.indexOf(origin) !== -1) {\n      callback(null, true)\n    } else {\n      callback(new Error('Not allowed by CORS'))\n    }\n  }\n}\n\nvar express = require('express');\n// Import the library:\nvar cors = require('cors');\n\nvar app = express();\n\n// Then pass them to cors:\napp.use(cors(corsOptions));\n"]},"metadata":{},"sourceType":"module"}