{"ast":null,"code":"var _jsxFileName = \"/Users/nicholaspatrikeos/Sites/Gallifrey4.0/gallifrey-frontend/src/pages/SubmissionsMarkPage.js\";\nimport React from 'react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport Layout from '../components/Layout';\nimport '../App.css';\nimport AuthContext from '../AuthContext';\nimport { useStep } from '../utils/update';\nimport { Converter } from 'showdown';\nimport ReactHTMLParser from 'react-html-parser';\n\nfunction SubmissionsMarkPage(props) {\n  var submission_id;\n\n  if (props.location.submission_id != undefined) {\n    submission_id = props.location.submission_id;\n    localStorage.setItem('currentSubmission', submission_id);\n  } else {\n    submission_id = localStorage.getItem('currentSubmission');\n  }\n\n  const token = React.useContext(AuthContext);\n  const [submission, setSubmission] = React.useState({\n    submission_id: 0,\n    comment: '',\n    files: [],\n    status: '',\n    task: {\n      description: '',\n      solution: '',\n      answer_type: '',\n      choices: []\n    },\n    url: '',\n    selected_answer: -1\n  });\n  const [textBox, setTextBox] = React.useState(submission.task.description);\n\n  const fetchSubmissionData = () => {\n    const getSubmissions = axios.get('/submissions/details', {\n      params: {\n        token,\n        submission_id\n      }\n    }).then(submissionsResponse => {\n      const submissionData = submissionsResponse.data.submission;\n      console.log(submissionData);\n      setSubmission(submissionData);\n    }).catch(err => {});\n  };\n\n  function equivalent(a, b) {\n    if (a.length != b.length) return false;\n\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] != b[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function showTask() {\n    setTextBox(submission.task.description);\n    var taskElement = document.getElementById('showTask');\n    var solnElement = document.getElementById('showSolution');\n    taskElement.style.borderTop = '1px solid lightgray';\n    taskElement.style.borderLeft = '1px solid lightgray';\n    taskElement.style.borderRight = '1px solid lightgray';\n    solnElement.style.border = '0px';\n  }\n\n  function showSolution() {\n    setTextBox(submission.task.solution);\n    var taskElement = document.getElementById('showTask');\n    var solnElement = document.getElementById('showSolution');\n    solnElement.style.borderTop = '1px solid lightgray';\n    solnElement.style.borderLeft = '1px solid lightgray';\n    solnElement.style.borderRight = '1px solid lightgray';\n    taskElement.style.border = '0px';\n  }\n\n  function markSubmission(status) {\n    axios.put('/submissions/mark', {\n      token,\n      submission_id,\n      status\n    }).then(response => {\n      const data = response.data;\n      console.log(data);\n      window.location.reload();\n    });\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n    var comment = event.target[0].value;\n    axios.post('/submissions/comment', {\n      token,\n      submission_id,\n      comment\n    }).then(response => {\n      const data = response.data;\n      console.log(data);\n      window.location.reload();\n    });\n  }\n\n  const step = useStep(fetchSubmissionData, [], 1);\n  var converter = new Converter();\n  var markingContent;\n\n  if (submission.task.answer_type == 'multiple-choice-single') {\n    markingContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"Answer\"), submission.task.choices.map((element, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"givenAnswer\",\n      id: 'answer' + (index + 1),\n      checked: index == submission.selected_answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: 'answer' + (index + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 19\n      }\n    }, element), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 72\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }\n    }, \"Correct Answer\"), submission.task.choices.map((element, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"radio\",\n      name: \"correctAnswer\",\n      id: 'answer' + (index + 1),\n      checked: index == submission.task.correct_answer,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: 'answer' + (index + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 19\n      }\n    }, element), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 72\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 11\n      }\n    }, \"Status\"), \": \", submission.status, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"topicTabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showTask\",\n      onClick: showTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showSolution\",\n      onClick: showSolution,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 13\n      }\n    }, \"Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"studentButton\",\n      onClick: () => markSubmission(submission.selected_answer == submission.task.correct_answer ? \"correct\" : \"incorrect\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }\n    }, \"Mark\"));\n  } else if (submission.task.answer_type == 'multiple-choice-multiple') {\n    markingContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }\n    }, \"Answer\"), submission.task.choices.map((element, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"givenAnswer\",\n      id: 'answer' + (index + 1),\n      checked: submission.selected_answer.includes(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: 'answer' + (index + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 19\n      }\n    }, element), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 72\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }\n    }, \"Correct Answer\"), submission.task.choices.map((element, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"checkbox\",\n      name: \"correctAnswer\",\n      id: 'answer' + (index + 1),\n      checked: submission.task.correct_answer.includes(index),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"label\", {\n      for: 'answer' + (index + 1),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 19\n      }\n    }, element), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 72\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 14\n      }\n    }), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 11\n      }\n    }, \"Status\"), \": \", submission.status, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"topicTabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showTask\",\n      onClick: showTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 13\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showSolution\",\n      onClick: showSolution,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 13\n      }\n    }, \"Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"studentButton\",\n      onClick: () => markSubmission(equivalent(submission.selected_answer.sort(), submission.task.correct_answer.sort()) ? \"correct\" : \"incorrect\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    }, \"Mark\"));\n  } else if (submission.task.answer_type == 'standard') {\n    markingContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }\n    }, \"Submission\"), submission.files.map(({\n      url,\n      cover_name\n    }, index) => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"a\", {\n      href: url,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, cover_name), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 47\n      }\n    }))), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 11\n      }\n    }, \"Status\"), \": \", submission.status, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"topicTabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showTask\",\n      onClick: showTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 13\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showSolution\",\n      onClick: showSolution,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, \"Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"greenTeacherButton\",\n      onClick: () => markSubmission('correct'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }\n    }, \"Correct\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"redTeacherButton\",\n      onClick: () => markSubmission('incorrect'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, \"Incorrect\"));\n  } else if (submission.task.answer_type == 'short-answer') {\n    markingContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }\n    }, \"Submission\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, submission.selected_answer), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 16\n      }\n    }), /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 11\n      }\n    }, \"Status\"), \": \", submission.status, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"topicTabs\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showTask\",\n      onClick: showTask,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }\n    }, \"Task\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"topicTab\",\n      id: \"showSolution\",\n      onClick: showSolution,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 13\n      }\n    }, \"Solution\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"greenTeacherButton\",\n      onClick: () => markSubmission('correct'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }\n    }, \"Correct\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"redTeacherButton\",\n      onClick: () => markSubmission('incorrect'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }\n    }, \"Incorrect\"));\n  }\n\n  return /*#__PURE__*/React.createElement(Layout, {\n    navtype: \"teacher\",\n    body: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"headerSection\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 11\n      }\n    }, \"Submissions\")), /*#__PURE__*/React.createElement(\"hr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"viewSubmission\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"teacherButton\",\n      id: \"closeWindow\",\n      onClick: () => markSubmission('unmarked'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 9\n      }\n    }, \"Reset Marking\"), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }\n    }, \"Task\"), submission.task.name, markingContent, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"taskSolutionContent\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 11\n      }\n    }, ReactHTMLParser(converter.makeHtml(textBox).replace(/(?:\\r\\n|\\r|\\n)/g, '<br>'))), /*#__PURE__*/React.createElement(\"h4\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    }, \"Comments\"), /*#__PURE__*/React.createElement(\"form\", {\n      name: \"addCommentForm\",\n      onSubmit: handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      name: \"comment\",\n      defaultValue: submission.comment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"submit\",\n      value: \"Add Comment\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(Link, {\n      to: \"/classes/topics/taskgroups/progress\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 11\n      }\n    }, \"Back\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 5\n    }\n  });\n}\n\nexport default SubmissionsMarkPage;","map":{"version":3,"sources":["/Users/nicholaspatrikeos/Sites/Gallifrey4.0/gallifrey-frontend/src/pages/SubmissionsMarkPage.js"],"names":["React","axios","Link","Layout","AuthContext","useStep","Converter","ReactHTMLParser","SubmissionsMarkPage","props","submission_id","location","undefined","localStorage","setItem","getItem","token","useContext","submission","setSubmission","useState","comment","files","status","task","description","solution","answer_type","choices","url","selected_answer","textBox","setTextBox","fetchSubmissionData","getSubmissions","get","params","then","submissionsResponse","submissionData","data","console","log","catch","err","equivalent","a","b","length","i","showTask","taskElement","document","getElementById","solnElement","style","borderTop","borderLeft","borderRight","border","showSolution","markSubmission","put","response","window","reload","handleSubmit","event","preventDefault","target","value","post","step","converter","markingContent","map","element","index","correct_answer","includes","sort","cover_name","name","makeHtml","replace"],"mappings":"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","sourcesContent":["import React from 'react'\nimport axios from 'axios'\nimport { Link } from 'react-router-dom';\nimport Layout from '../components/Layout'\nimport '../App.css'\nimport AuthContext from '../AuthContext'\nimport { useStep } from '../utils/update'\nimport { Converter } from 'showdown'\nimport ReactHTMLParser from 'react-html-parser'\n\nfunction SubmissionsMarkPage(props) {\n\n  var submission_id\n  if (props.location.submission_id != undefined) {\n    submission_id = props.location.submission_id\n    localStorage.setItem('currentSubmission', submission_id)\n  } else {\n    submission_id = localStorage.getItem('currentSubmission')\n  }\n\n  const token = React.useContext(AuthContext)\n  const [submission, setSubmission] = React.useState({\n    submission_id: 0,\n    comment: '',\n    files: [],\n    status: '',\n    task: {\n      description: '',\n      solution: '',\n      answer_type: '',\n      choices: []\n    },\n    url: '',\n    selected_answer: -1,\n  })\n  const [textBox, setTextBox] = React.useState(submission.task.description)\n\n  const fetchSubmissionData = () => {\n    const getSubmissions = axios.get('/submissions/details', {params: { token, submission_id }})\n      .then((submissionsResponse) => {\n        const submissionData = submissionsResponse.data.submission\n        console.log(submissionData)\n        setSubmission(submissionData)\n      })\n      .catch((err) => {})\n  }\n\n  function equivalent(a, b) {\n      if (a.length != b.length) return false\n\n      for (var i = 0; i < a.length; i++) {\n          if (a[i] != b[i]) {\n              return false\n          }\n      }\n      return true\n  }\n\n  function showTask() {\n    setTextBox(submission.task.description)\n    var taskElement = document.getElementById('showTask')\n    var solnElement = document.getElementById('showSolution')\n\n    taskElement.style.borderTop = '1px solid lightgray'\n    taskElement.style.borderLeft = '1px solid lightgray'\n    taskElement.style.borderRight = '1px solid lightgray'\n    solnElement.style.border = '0px'\n  }\n\n  function showSolution() {\n    setTextBox(submission.task.solution)\n    var taskElement = document.getElementById('showTask')\n    var solnElement = document.getElementById('showSolution')\n\n    solnElement.style.borderTop = '1px solid lightgray'\n    solnElement.style.borderLeft = '1px solid lightgray'\n    solnElement.style.borderRight = '1px solid lightgray'\n    taskElement.style.border = '0px'\n  }\n\n  function markSubmission(status) {\n    axios.put('/submissions/mark', { token, submission_id, status })\n      .then((response) => {\n        const data = response.data\n        console.log(data)\n        window.location.reload()\n      })\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault()\n\n    var comment = event.target[0].value\n\n    axios.post('/submissions/comment', { token, submission_id, comment })\n      .then((response) => {\n        const data = response.data\n        console.log(data)\n        window.location.reload()\n      })\n  }\n\n  const step = useStep(fetchSubmissionData, [], 1)\n  var converter = new Converter()\n\n  var markingContent\n  if (submission.task.answer_type == 'multiple-choice-single') {\n      markingContent = (\n          <>\n          <h4>Answer</h4>\n          {submission.task.choices.map((element, index) => (\n              <>\n                  <input type='radio' name='givenAnswer' id={'answer' + (index + 1)} checked={index == submission.selected_answer} />\n                  <label for={'answer' + (index + 1)}>{element}</label><br/>\n              </>\n          ))}<br/>\n\n          <h4>Correct Answer</h4>\n          {submission.task.choices.map((element, index) => (\n              <>\n                  <input type='radio' name='correctAnswer' id={'answer' + (index + 1)} checked={index == submission.task.correct_answer} />\n                  <label for={'answer' + (index + 1)}>{element}</label><br/>\n              </>\n          ))}<br/>\n\n          <strong>Status</strong>: {submission.status}\n\n          <div id='topicTabs'>\n            <div className='topicTab' id='showTask' onClick={showTask}>Task</div>\n            <div className='topicTab' id='showSolution' onClick={showSolution}>Solution</div>\n          </div>\n\n          <div className='studentButton' onClick={() => markSubmission((submission.selected_answer == submission.task.correct_answer) ? \"correct\" : \"incorrect\")}>Mark</div>\n\n          </>\n      )\n  } else if (submission.task.answer_type == 'multiple-choice-multiple') {\n      markingContent = (\n          <>\n          <h4>Answer</h4>\n          {submission.task.choices.map((element, index) => (\n              <>\n                  <input type='checkbox' name='givenAnswer' id={'answer' + (index + 1)} checked={submission.selected_answer.includes(index)} />\n                  <label for={'answer' + (index + 1)}>{element}</label><br/>\n              </>\n          ))}<br/>\n\n          <h4>Correct Answer</h4>\n          {submission.task.choices.map((element, index) => (\n              <>\n                  <input type='checkbox' name='correctAnswer' id={'answer' + (index + 1)} checked={submission.task.correct_answer.includes(index)} />\n                  <label for={'answer' + (index + 1)}>{element}</label><br/>\n              </>\n          ))}<br/>\n\n          <strong>Status</strong>: {submission.status}\n\n          <div id='topicTabs'>\n            <div className='topicTab' id='showTask' onClick={showTask}>Task</div>\n            <div className='topicTab' id='showSolution' onClick={showSolution}>Solution</div>\n          </div>\n\n          <div className='studentButton' onClick={() => markSubmission((equivalent(submission.selected_answer.sort(), submission.task.correct_answer.sort())) ? \"correct\" : \"incorrect\")}>Mark</div>\n\n          </>\n      )\n  } else if (submission.task.answer_type == 'standard') {\n      markingContent = (\n          <>\n          <h4>Submission</h4>\n          {submission.files.map(({url, cover_name}, index) => (\n              <><a href={url}>{cover_name}</a><br/></>\n          ))}\n          <br/><br/>\n\n          <strong>Status</strong>: {submission.status}\n\n\n          <div id='topicTabs'>\n            <div className='topicTab' id='showTask' onClick={showTask}>Task</div>\n            <div className='topicTab' id='showSolution' onClick={showSolution}>Solution</div>\n          </div>\n\n          <div className='greenTeacherButton' onClick={() => markSubmission('correct')}>Correct</div>\n          <div className='redTeacherButton' onClick={() => markSubmission('incorrect')}>Incorrect</div>\n\n          </>\n      )\n  } else if (submission.task.answer_type == 'short-answer') {\n      markingContent = (\n          <>\n          <h4>Submission</h4>\n          <p>{submission.selected_answer}</p>\n          <br/><br/>\n\n          <strong>Status</strong>: {submission.status}\n\n\n          <div id='topicTabs'>\n            <div className='topicTab' id='showTask' onClick={showTask}>Task</div>\n            <div className='topicTab' id='showSolution' onClick={showSolution}>Solution</div>\n          </div>\n\n          <div className='greenTeacherButton' onClick={() => markSubmission('correct')}>Correct</div>\n          <div className='redTeacherButton' onClick={() => markSubmission('incorrect')}>Incorrect</div>\n\n          </>\n      )\n  }\n\n  return (\n    <Layout navtype='teacher' body={\n      <>\n        <div className='headerSection'>\n          <h1>Submissions</h1>\n        </div>\n        <hr/>\n        <div className='viewSubmission'>\n\n        <div className='teacherButton' id='closeWindow' onClick={() => markSubmission('unmarked')}>\n          Reset Marking\n        </div>\n\n          <h4>Task</h4>\n          {submission.task.name}\n\n          {markingContent}\n\n          <div id='taskSolutionContent'>\n            {ReactHTMLParser(converter.makeHtml(textBox).replace(/(?:\\r\\n|\\r|\\n)/g, '<br>'))}\n          </div>\n\n          <h4>Comments</h4>\n          <form name='addCommentForm' onSubmit={handleSubmit}>\n            <input type='text' name='comment' defaultValue={submission.comment}/>\n            <input type='submit' value='Add Comment'/>\n          </form>\n          <Link to='/classes/topics/taskgroups/progress'>Back</Link>\n        </div>\n      </>\n    }/>\n  )\n\n}\n\nexport default SubmissionsMarkPage\n"]},"metadata":{},"sourceType":"module"}